import json; import hashlib; class FractalBlock: def __init__(self, index, previous_hash, transactions, difficulty, nonce=None): self.index = index; self.previous_hash = previous_hash; self.transactions = transactions; self.difficulty = difficulty; self.nonce = nonce or 0; self.timestamp = None; self.hash = self.calculate_hash(); def calculate_hash(self): block_data = {'index': self.index, 'previous_hash': self.previous_hash, 'transactions': self.transactions, 'difficulty': self.difficulty, 'nonce': self.nonce}; return hashlib.sha256(json.dumps(block_data, sort_keys=True).encode('utf-8')).hexdigest(); def mine_block(self): while not self.hash.startswith('0' * self.difficulty): self.nonce += 1; self.hash = self.calculate_hash(); class FractalChain: def __init__(self, difficulty): self.chain = []; self.difficulty = difficulty; self.create_genesis_block(); def create_genesis_block(self): genesis_block = FractalBlock(0, '0' * 64, [], self.difficulty); self.chain.append(genesis_block); def add_block(self, transactions): previous_block = self.chain[-1]; new_block = FractalBlock(index=previous_block.index + 1, previous_hash=previous_block.hash, transactions=transactions, difficulty=self.difficulty); new_block.mine_block(); self.chain.append(new_block); def is_chain_valid(self): for i in range(1, len(self.chain)): current_block = self.chain[i]; previous_block = self.chain[i - 1]; if current_block.hash != current_block.calculate_hash(): return False; if current_block.previous_hash != previous_block.hash: return False; return True
